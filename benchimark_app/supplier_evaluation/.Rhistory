# Coordinates of Novara
novara_lon <- 8.6200
novara_lat <- 45.4500
# Convert degrees to radians
to_radians <- function(deg) deg * pi / 180
lon1 <- to_radians(novara_lon)
lat1 <- to_radians(novara_lat)
lon2 <- to_radians(df_distance$lon)
lat2 <- to_radians(df_distance$lat)
# Haversine formula
delta_lon <- lon2 - lon1
delta_lat <- lat2 - lat1
a <- sin(delta_lat / 2)^2 + cos(lat1) * cos(lat2) * sin(delta_lon / 2)^2
c <- 2 * atan2(sqrt(a), sqrt(1 - a))
distance <- round(R * c,0)
big_number_plot(
value = paste(distance, "km"),
text = "Distance",
value_color = p_green1
)
runApp('app')
runApp('app')
styler:::style_active_file()
runApp('app')
runApp('app')
runApp('app')
#test
# Create data: note in High school for Jonathan:
testdf <- as.data.frame(matrix( sample( 2:20 , 10 , replace=T) , ncol=10))
colnames(testdf) <- c("math" , "english" , "biology" , "music" , "R-coding", "data-viz" , "french" , "physic", "statistic", "sport" )
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
testdf <- rbind(rep(20,10) , rep(0,10) , testdf)
# Check your data, it has to look like this!
head(testdf)
# The default radar chart
# Custom the radarChart !
radarchart( testdf  , axistype=1 ,
#custom polygon
pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=4 ,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,20,5), cglwd=0.8,
#custom labels
vlcex=0.8
)
#test
# Create data: note in High school for Jonathan:
testdf <- as.data.frame(matrix( sample( 2:20 , 10 , replace=T) , ncol=10))
colnames(testdf) <- c("math" , "english" , "biology" , "music" , "R-coding", "data-viz" , "french" , "physic", "statistic", "sport" )
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
testdf <- rbind(rep(20,10) , rep(0,10) , testdf)
# Check your data, it has to look like this!
head(testdf)
# The default radar chart
# Custom the radarChart !
radarchart( testdf  , axistype=1 ,
#custom polygon
pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=4 ,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,20,5), cglwd=0.8,
#custom labels
vlcex=0.8
)
#test
# Create data: note in High school for Jonathan:
testdf <- as.data.frame(matrix( sample( 2:20 , 10 , replace=T) , ncol=10))
colnames(testdf) <- c("math" , "english" , "biology" , "music" , "R-coding", "data-viz" , "french" , "physic", "statistic", "sport" )
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
testdf <- rbind(rep(20,10) , rep(0,10) , testdf)
# Check your data, it has to look like this!
head(testdf)
# The default radar chart
# Custom the radarChart !
radarchart( testdf  , axistype=1 ,
#custom polygon
pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=4 ,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,20,5), cglwd=0.8,
#custom labels
vlcex=8
)
#test
# Create data: note in High school for Jonathan:
testdf <- as.data.frame(matrix( sample( 2:20 , 10 , replace=T) , ncol=10))
colnames(testdf) <- c("math" , "english" , "biology" , "music" , "R-coding", "data-viz" , "french" , "physic", "statistic", "sport" )
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
testdf <- rbind(rep(20,10) , rep(0,10) , testdf)
# Check your data, it has to look like this!
head(testdf)
# The default radar chart
# Custom the radarChart !
radarchart( testdf  , axistype=1 ,
#custom polygon
pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=4 ,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,20,5), cglwd=0.8,
#custom labels
vlcex=4
)
runApp('app')
#test
# Create data: note in High school for Jonathan:
testdf <- as.data.frame(matrix( sample( 2:20 , 10 , replace=T) , ncol=10))
colnames(testdf) <- c("math" , "english" , "biology" , "music" , "R-coding", "data-viz" , "french" , "physic", "statistic", "sport" )
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
testdf <- rbind(rep(20,10) , rep(0,10) , testdf)
# Check your data, it has to look like this!
head(testdf)
# The default radar chart
# Custom the radarChart !
radarchart( testdf  , axistype=1 ,
#custom polygon
pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=4 ,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,20,5), cglwd=0.8,
#custom labels
vlcex=1
)
#test
# Create data: note in High school for Jonathan:
testdf <- as.data.frame(matrix( sample( 2:20 , 10 , replace=T) , ncol=10))
colnames(testdf) <- c("math" , "english" , "biology" , "music" , "R-coding", "data-viz" , "french" , "physic", "statistic", "sport" )
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
testdf <- rbind(rep(20,10) , rep(0,10) , testdf)
# Check your data, it has to look like this!
head(testdf)
# The default radar chart
# Custom the radarChart !
radarchart( testdf  , axistype=1 ,
#custom polygon
pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=4 ,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,20,5), cglwd=0.8,
#custom labels
vlcex=1
)
#| label: parallel-plot
#| warning: false
#| message: false
company <- "Supplier A"
df2 <- df %>%
mutate(highlight = ifelse(Company == company, TRUE, FALSE))
parallel_plot <- df2 %>%
select(Company,Cost, Quality, Delivery, Service, Technology) %>%
mutate(across(Cost:Technology, as.numeric)) %>%
ggparcoord(
columns = 2:6, # Specify columns to plot
groupColumn = "Company",
# order = "anyClass",
scale = "center",
# Normalize data (optional,globalminmax → No scaling,
# uniminmax → Standardize to Min = 0 and Max = 1
# std → Normalize univariately (substract mean & divide by sd)
# center → Standardize and center variables)
alphaLines = 1,
showPoints = TRUE # Add points to the lines (optional)
) +
scale_color_manual(
values = setNames(c("gray80", p_green1), c("Other", company)),
guide = "none" # Hide legend for color
) +
labs(
title = paste(company, "performance scores by category"),
x = "Category",
y = "Standardized-Centralized Score"
) +
theme_minimal(base_family = "Verdana") +
theme(
legend.position = "Default"
)
parallel_plot
#| label: parallel-plot
#| warning: false
#| message: false
company <- "Supplier A"
df2 <- df %>%
mutate(highlight = ifelse(Company == company, TRUE, FALSE))
parallel_plot <- df2 %>%
select(Company,Cost, Quality, Delivery, Service, Technology) %>%
mutate(across(Cost:Technology, as.numeric)) %>%
ggparcoord(
columns = 2:6, # Specify columns to plot
groupColumn = "Company",
# order = "anyClass",
scale = "center",
# Normalize data (optional,globalminmax → No scaling,
# uniminmax → Standardize to Min = 0 and Max = 1
# std → Normalize univariately (substract mean & divide by sd)
# center → Standardize and center variables)
alphaLines = 1,
showPoints = TRUE # Add points to the lines (optional)
) +
scale_color_manual(
values = setNames(c("gray80", p_green1), c("Other", company)),
guide = "none" # Hide legend for color
) +
labs(
title = paste(company, "performance scores by category"),
x = "Category",
y = "Standardized-Centralized Score"
) +
theme_minimal(base_family = "Verdana") +
theme(
legend.position = "Default",
# plot.title = element_text(hjust = 0.5),  # Center title
line = element_line(size = 1)  # Make lines thicker
)
parallel_plot
#| label: parallel-plot
#| warning: false
#| message: false
company <- "Supplier A"
df2 <- df %>%
mutate(highlight = ifelse(Company == company, TRUE, FALSE))
parallel_plot <- df2 %>%
select(Company,Cost, Quality, Delivery, Service, Technology) %>%
mutate(across(Cost:Technology, as.numeric)) %>%
ggparcoord(
columns = 2:6, # Specify columns to plot
groupColumn = "Company",
# order = "anyClass",
scale = "center",
# Normalize data (optional,globalminmax → No scaling,
# uniminmax → Standardize to Min = 0 and Max = 1
# std → Normalize univariately (substract mean & divide by sd)
# center → Standardize and center variables)
alphaLines = 1,
showPoints = TRUE # Add points to the lines (optional)
) +
scale_color_manual(
values = setNames(c("gray80", p_green1), c("Other", company)),
guide = "none" # Hide legend for color
) +
labs(
title = paste(company, "performance scores by category"),
x = "Category",
y = "Standardized-Centralized Score"
) +
theme_minimal(base_family = "Verdana") +
theme(
legend.position = "Default",
# plot.title = element_text(hjust = 0.5),  # Center title
line = element_line(size = 4)  # Make lines thicker
)
parallel_plot
#| label: parallel-plot
#| warning: false
#| message: false
company <- "Supplier A"
df2 <- df %>%
mutate(highlight = ifelse(Company == company, TRUE, FALSE))
parallel_plot <- df2 %>%
select(Company,Cost, Quality, Delivery, Service, Technology) %>%
mutate(across(Cost:Technology, as.numeric)) %>%
ggparcoord(
columns = 2:6, # Specify columns to plot
groupColumn = "Company",
# order = "anyClass",
scale = "center",
# Normalize data (optional,globalminmax → No scaling,
# uniminmax → Standardize to Min = 0 and Max = 1
# std → Normalize univariately (substract mean & divide by sd)
# center → Standardize and center variables)
alphaLines = 1,
showPoints = TRUE # Add points to the lines (optional)
) +
scale_color_manual(
values = setNames(c("gray80", p_green1), c("Other", company)),
guide = "none" # Hide legend for color
) +
labs(
title = paste(company, "performance scores by category"),
x = "Category",
y = "Standardized-Centralized Score"
) +
theme_minimal(base_family = "Verdana") +
theme(
legend.position = "Default",
)
parallel_plot
#| label: parallel-plot
#| warning: false
#| message: false
company <- "Supplier A"
df2 <- df %>%
mutate(highlight = ifelse(Company == company, TRUE, FALSE))
parallel_plot <- df2 %>%
select(Company,Cost, Quality, Delivery, Service, Technology) %>%
mutate(across(Cost:Technology, as.numeric)) %>%
ggparcoord(
columns = 2:6, # Specify columns to plot
groupColumn = "Company",
# order = "anyClass",
scale = "center",
# Normalize data (optional,globalminmax → No scaling,
# uniminmax → Standardize to Min = 0 and Max = 1
# std → Normalize univariately (substract mean & divide by sd)
# center → Standardize and center variables)
alphaLines = 1,
showPoints = TRUE # Add points to the lines (optional)
) +
scale_color_manual(
values = setNames(c("gray80", p_green1), c("Other", company)),
guide = "none" # Hide legend for color
) +
scale_size_manual(             # Control line thickness
values = c(FALSE = 0.5, TRUE = 1.5),
#| label: parallel-plot
#| warning: false
#| message: false
company <- "Supplier A"
df2 <- df %>%
mutate(highlight = ifelse(Company == company, TRUE, FALSE))
parallel_plot <- df2 %>%
select(Company,Cost, Quality, Delivery, Service, Technology) %>%
mutate(across(Cost:Technology, as.numeric)) %>%
ggparcoord(
columns = 2:6, # Specify columns to plot
groupColumn = "Company",
# order = "anyClass",
scale = "center",
# Normalize data (optional,globalminmax → No scaling,
# uniminmax → Standardize to Min = 0 and Max = 1
# std → Normalize univariately (substract mean & divide by sd)
# center → Standardize and center variables)
alphaLines = 1,
showPoints = TRUE # Add points to the lines (optional)
) +
scale_color_manual(
values = setNames(c("gray80", p_green1), c("Other", company)),
guide = "none" # Hide legend for color
) +
scale_size_manual(             # Control line thickness
values = c("Other" = 0.5, company = 1.5),
guide = "none"              # Hide legend for line size
) +
labs(
title = paste(company, "performance scores by category"),
x = "Category",
y = "Standardized-Centralized Score"
) +
theme_minimal(base_family = "Verdana") +
theme(
legend.position = "Default",
)
parallel_plot
#| label: parallel-plot
#| warning: false
#| message: false
company <- "Supplier A"
df2 <- df %>%
mutate(highlight = ifelse(Company == company, TRUE, FALSE))
parallel_plot <- df2 %>%
select(Company,Cost, Quality, Delivery, Service, Technology) %>%
mutate(across(Cost:Technology, as.numeric)) %>%
ggparcoord(
columns = 2:6, # Specify columns to plot
groupColumn = "Company",
# order = "anyClass",
scale = "center",
# Normalize data (optional,globalminmax → No scaling,
# uniminmax → Standardize to Min = 0 and Max = 1
# std → Normalize univariately (substract mean & divide by sd)
# center → Standardize and center variables)
alphaLines = 1,
showPoints = TRUE # Add points to the lines (optional)
) +
scale_color_manual(
values = setNames(c("gray80", p_green1), c("Other", company)),
guide = "none" # Hide legend for color
) +
scale_size_manual(             # Control line thickness
values = c("Other" = 0.5, company = 4.5),
guide = "none"              # Hide legend for line size
) +
labs(
title = paste(company, "performance scores by category"),
x = "Category",
y = "Standardized-Centralized Score"
) +
theme_minimal(base_family = "Verdana") +
theme(
legend.position = "Default",
)
parallel_plot
#| label: parallel-plot
#| warning: false
#| message: false
company <- "Supplier A"
df2 <- df %>%
mutate(highlight = ifelse(Company == company, TRUE, FALSE))
parallel_plot <- df2 %>%
select(Company,Cost, Quality, Delivery, Service, Technology) %>%
mutate(across(Cost:Technology, as.numeric)) %>%
ggparcoord(
columns = 2:6, # Specify columns to plot
groupColumn = "Company",
# order = "anyClass",
scale = "center",
# Normalize data (optional,globalminmax → No scaling,
# uniminmax → Standardize to Min = 0 and Max = 1
# std → Normalize univariately (substract mean & divide by sd)
# center → Standardize and center variables)
alphaLines = 1,
showPoints = TRUE # Add points to the lines (optional)
) +
scale_color_manual(
values = setNames(c("gray80", p_green1), c("Other", company)),
guide = "none" # Hide legend for color
) +
scale_size_manual(             # Control line thickness
values = setNames(c(0.5, 4.5), c("Other", company)),
guide = "none"              # Hide legend for line size
) +
labs(
title = paste(company, "performance scores by category"),
x = "Category",
y = "Standardized-Centralized Score"
) +
theme_minimal(base_family = "Verdana") +
theme(
legend.position = "Default",
)
parallel_plot
#| label: parallel-plot
#| warning: false
#| message: false
library(GGally)
library(dplyr)
library(ggplot2)
company <- "Supplier A"
# Prepare the data
df2 <- df %>%
mutate(highlight = ifelse(Company == company, "Highlight", "Other"))
# Generate parallel plot
parallel_plot <- df2 %>%
select(Company, Cost, Quality, Delivery, Service, Technology, highlight) %>%
mutate(across(Cost:Technology, as.numeric)) %>%
ggparcoord(
columns = 2:6,              # Specify columns to plot
groupColumn = "highlight",  # Use 'highlight' to differentiate lines
scale = "center",           # Standardize and center variables
alphaLines = 1,             # Full opacity for lines
showPoints = TRUE           # Add points to the lines
) +
scale_color_manual(
values = c("Other" = "gray80", "Highlight" = p_green1),  # Custom colors
guide = "none"                                           # Hide legend for color
) +
scale_size_manual(
values = c("Other" = 0.5, "Highlight" = 2),              # Thicker lines for highlights
guide = "none"                                           # Hide legend for line size
) +
labs(
title = paste(company, "Performance Scores by Category"),
x = "Category",
y = "Standardized-Centralized Score"
) +
theme_minimal(base_family = "Verdana") +
theme(
legend.position = "none",          # Remove legend entirely
plot.title = element_text(hjust = 0.5),  # Center-align title
panel.grid = element_line(size = 0.25)   # Ensure grid lines remain thin
)
parallel_plot
runApp('app')
runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
runApp('app')
shiny::runApp('app')
runApp('C:/Users/satos/Documents/SATOM/01.product/07.ShinyWebApp/01.Benchmark_app/benchimark_app/Supplier_Relationship_Management/SRM_App')
runApp('C:/Users/satos/Documents/SATOM/01.product/07.ShinyWebApp/01.Benchmark_app/benchimark_app/Supplier_Relationship_Management/test')
runApp()
runApp('app')
runApp()
runApp('C:/Users/satos/Documents/SATOM/01.product/07.ShinyWebApp/01.Benchmark_app/benchimark_app/Supplier_Relationship_Management/SRM_App')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp()
rsconnect::writeManifest()
runApp('app')
rsconnect::writeManifest()
rlang::last_trace()
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
rsconnect::writeManifest()
rsconnect::writeManifest(contentCategory = "site")
library(rsconnect)
rsconnect::writeManifest()
setwd("C:/Users/satos/Documents/SATOM/01.product/07.ShinyWebApp/01.Benchmark_app/benchimark_app/supplier_evaluation/app")
rsconnect::writeManifest()
