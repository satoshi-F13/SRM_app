---
title: "Supplier Relationship Report"
format: 
   typst:
     template-partials:
       - typst-show.typ
       - typst-template.typ
execute: 
  echo: false
  
params:
    company: NULL
    data: NULL
    distance: NULL
    df: NULL
    ranking: NULL
    total_sup: NULL
---

```{r}
#| label: load-packages
#| output: false
library(dplyr)
library(tidyr)
library(flextable)
library(tidyverse)
library(plotly)
library(ggplot2)
library(GGally)
library(ggmap)
library(scales)
library(extrafont)
library(viridis)
library(patchwork)
library(hrbrthemes)
library(fmsb)
library(colormap)

# Assign parameters as data values or frames
company <- params$company
df <- readRDS(params$df)
```

```{r echo=FALSE, message=FALSE}
#| label: branding
#|
p_green1 <- "#61A60E"
p_green2 <- "#002900"
p_grey1 <- "#B2B2B2"

theme_srm <- function() {
  theme_void(base_family = "Verdana") +
    theme()
}

# If the font is not imported in Rstudio, do the functions below.
# https://stackoverflow.com/questions/34522732/changing-fonts-in-ggplot2
# library(extrafont)
# font_import()
# loadfonts(device = "win")
```


```{r}


# Big Number Plot Function
big_number_plot <- function(
    value,
    text,
    value_color) {
  ggplot() +
    # Add value
    geom_text(
      aes(
        x = 1,
        y = 1.01,
        label = value
      ),
      color = value_color,
      fontface = "bold",
      size = 20,
      hjust = 0
    ) +

    # Add text
    geom_text(
      aes(
        x = 1,
        y = 1.165,
        hjust = "middle",
        label = str_to_title(text)
      ),
      color = "gray70",
      size = 7,
      hjust = 0
    ) +
    theme_srm() +
    coord_cartesian(xlim = c(0.99, 1.4), ylim = c(0.95, 1.25))
}


# Function to create the comparison plot
comparison_plot <- function(data, highlight_company, value_type, highlight_color) {
  plot <- ggplot(data, aes(x = value)) +
    # Light gray vertical lines for all data
    geom_point(aes(y = 1), shape = 124, size = 4, color = "gray80") +
    # Darker vertical line for the highlighted company
    geom_point(
      data = data %>% filter(Company == highlight_company),
      aes(y = 1),
      shape = 124,
      size = 10,
      color = highlight_color
    ) +
    # Add annotation for the highlighted company
    geom_text(
      data = data %>% filter(Company == highlight_company),
      aes(y = 1, label = Company),
      hjust = -0.2, # Adjust horizontal position of the text
      vjust = -1.4, # Center vertically
      size = 5, # Adjust text size
      color = highlight_color
    ) +
    # Horizontal grid line at y = 1
    geom_hline(yintercept = 1, color = "gray", linetype = "solid") +
    # Adjustments for minimal appearance
    theme_srm() +
    theme(
      axis.title.x = element_text(size = 80L),
      axis.title.y = element_blank(),
      axis.text.y = element_blank(),
      axis.ticks.y = element_blank(),
      panel.grid.major.x = element_blank(), # Remove x gridlines
      panel.grid.minor.x = element_blank(), # Remove minor x gridlines
      panel.grid.minor.y = element_blank(), # Remove minor y gridlines
      panel.grid.major.y = element_blank(), # Remove y gridlines except hline
      plot.margin = margin(t = 2, r = 5, b = 2, l = 5) # Minimize white space
    ) +
    scale_y_continuous(
      expand = c(0, 0),
      limits = c(0.95, 1.05) # Shrink the y-axis range
    ) +
    # scale_x_continuous(
    #   limits = c(-0.1, 1),
    #   expand = c(0, 0)
    # ) +
    labs(
      x = NULL,
      y = NULL
    ) +
    # Move x-axis closer to y=1
    theme(axis.text.x = element_text(margin = margin(t = 0))) # Adjust x-axis text

  # Add conditional formatting for x-axis based on value_type
  if (value_type == "percent") {
    plot <- plot +
      scale_x_continuous(labels = percent_format(accuracy = 1), limits = c(-0.1, 1)) +
      coord_cartesian(xlim = c(-0.05, 1.1), ylim = c(0.99, 1.1))
  } else if (value_type == "number") {
    plot <- plot +
      scale_x_continuous(labels = comma_format(accuracy = 1), limits = c(-0.1, 10.1)) +
      coord_cartesian(xlim = c(-0.5, 10.1), ylim = c(0.99, 1.1))
  } else {
    stop("Invalid value_type. Use 'percent' or 'number'.")
  }

  options(repr.plot.width = 5, repr.plot.height = 1)

  # Return the final plot
  return(plot)
}
```


# `r params$company`

## Introduction

In the dynamic landscape of supply chain management, systematic supplier evaluation is crucial for maintaining competitive advantage and operational excellence. This comprehensive report analyzes. **`r params$company`** 's performance across five critical dimensions: quality, cost, delivery, service, and technology. Utilizing a standardized scoring methodology, each dimension is meticulously assessed on a scale of 1 to 10, culminating in a total potential score of 50 points. By providing a holistic and quantitative assessment, this evaluation offers actionable insights into the supplier's strengths, potential areas of improvement, and overall strategic alignment with our organizational objectives.

```{r echo=FALSE}
#| label: table
# Product Size Table
sup_data <- data.frame(
  Category = c("Company", "Cost", "Quality", "Delivery", "Service", "Technology", "City", "lon", "lat", "composite_score"),
  Value = c(
    params$data$Company,
    params$data$Cost,
    params$data$Quality,
    params$data$Delivery,
    params$data$Service,
    params$data$Technology,
    params$data$City,
    params$data$lon,
    params$data$lat,
    params$data$composite_score
  )
) %>%
  pivot_wider(names_from = Category, values_from = Value) %>%
  mutate(across(
    c(Cost, Quality, Delivery, Service, Technology, lon, lat, composite_score),
    as.numeric
  ))
```


### Key Findings


```{r echo=FALSE}
#| label: geo_info
#| warning: false
#| message: false
# The `r params$company` is located in `r params$data$City` and `r params$distance`km away from our office in Novara.
# API Key: 93a24586-34d5-4141-bb44-39d710140b35
stadia_key <- "93a24586-34d5-4141-bb44-39d710140b35"
register_stadiamaps(key = stadia_key)

# Define the map's center and zoom level
center_lon <- mean(sup_data$lon)
center_lat <- mean(sup_data$lat)
zoom_level <- 7


# Retrieve OpenStreetMap tiles
map <- get_stadiamap(
  bbox = c(
    left = min(sup_data$lon) - 2, bottom = min(sup_data$lat) - 2,
    right = max(sup_data$lon) + 4, top = max(sup_data$lat) + 2
  ),
  zoom = zoom_level,
  maptype = "stamen_toner_lite" # Options include "toner", "terrain", etc.
)

# Plot the map with ggmap and add points
map_plot <- ggmap(map) +
  geom_point(
    data = sup_data,
    aes(x = lon, y = lat),
    color = "orange",
    size = 3
  ) +
  geom_text(
    data = sup_data,
    aes(x = lon, y = lat, label = Company),
    vjust = -1,
    color = "#EB5B00",
    fontface = "bold",
    size = 6
  ) +
  labs(
    title = "Supplier Locations",
    # x = "Longitude",
    # y = "Latitude"
  ) +
  theme(
    plot.margin = margin(0, 0, 0, 0, unit = "cm"), # Remove all margins
    panel.spacing = unit(0, "cm"), # Remove spacing between panels
    plot.background = element_rect(fill = "transparent", color = NA),
    panel.background = element_rect(fill = "transparent"),
    axis.title = element_blank(), # Optional: Remove axis titles
    axis.text = element_blank(), # Optional: Remove axis text
    axis.ticks = element_blank() # Optional: Remove axis ticks
  )
# Save the map as a PNG
ggsave("asset/location-map.png", plot = map_plot, width = 8, height = 8)
```



```{r echo=FALSE}
#| label: radar
#| warning: false
#| message: false
#| tbl-cap: "Performance Chart by 5 factors"
#| tbl-cap-location: bottom

# A radar chart of **`r params$company`**'s performance shows multiple performance metrics of suppliers simultaneously. The total score of `r params$company` is **`r params$data$composite_score`**.
# Reshape data into long format
df_radar <- sup_data %>%
  select(-c(Company, City, lon, lat, composite_score))
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
df_radar <- rbind(rep(10, 5), rep(0, 5), df_radar)


# Custom the radarChart !
png(filename = "asset/radar_plot.png", width = 800)
par(mar = c(0, 0, 0, 0), family = "Verdana")
radarchart(df_radar,
  axistype = 1,

  # custom polygon
  pcol = p_green1, # Polygon line color
  pfcol = scales::alpha(p_green1, 0.5), # Polygon fill color
  plwd = 4, # Polygon line width

  # custom the grid
  cglcol = "grey", # color of the net
  cglty = 6, # net line type
  axislabcol = "grey", # color of axis labels
  caxislabels = seq(0, 10, 2.5), # vector of axis labels to display
  cglwd = 0.8, # net width

  # custom labels
  vlcex = 2 #  group labels size
)
```



```{r echo=FALSE}
#| label: total_supplier_number

val_sum_sup <-
  df %>%
  nrow()
total_supplier_number <-
  big_number_plot(
    value = val_sum_sup,
    text = "Total Suppliers",
    value_color = p_green1
  )

ggsave(filename = "asset/total_supplier_number.png", plot = total_supplier_number, width = 4, height = 2)
```


```{r echo=FALSE}
#| label: Composite-Score
val_score <-
  df %>%
  filter(Company == company) %>%
  pull(composite_score)

score_plot <-
  big_number_plot(
    value = val_score,
    text = "Composite Score",
    value_color = p_green1
  )
ggsave(filename = "asset/score_plot.png", plot = score_plot, width = 4, height = 2)
```


```{r echo=FALSE}
#| label: rank
val_rank <-
  df %>%
  arrange(desc(composite_score)) %>%
  mutate(rank = row_number()) %>%
  filter(Company == params$company) %>%
  pull(rank)

rank_plot <-
  big_number_plot(
    value = paste(val_rank, "/", val_sum_sup),
    text = "Ranking",
    value_color = p_green1
  )
ggsave(filename = "asset/rank_plot.png", rank_plot, width = 4, height = 2)
```


```{r echo=FALSE}
# It nees to shrink upper white spaces of chart.

# Scale the composite score
df_scaled <- df %>%
  select(Company, composite_score) %>%
  mutate(value = rescale_max(composite_score, from = c(0, 10), to = c(0, 10))) %>% # min as 0 and max as 10.
  mutate(Company = as.factor(Company)) %>%
  select(-composite_score)


horizontal_plot <-
  comparison_plot(
    data = df_scaled,
    highlight_company = params$company,
    value_type = "number",
    highlight_color = p_green1
  )
ggsave(filename = "asset/horizontal_plot.png", horizontal_plot, width = 10, height = 1)
```



```{r echo=FALSE}
#| label: Technicah_score

val_tec_level <-
  df %>%
  filter(Company == company) %>%
  pull(Technology_Level)

tec_level_plot <-
  big_number_plot(
    value = val_tec_level,
    text = "Tech Level",
    value_color = p_green1
  )
ggsave(filename = "asset/tec_level_plot.png", plot = tec_level_plot, width = 4, height = 2)
```


```{r echo=FALSE}
val_sup_category <-
  df %>%
  filter(Company == company) %>%
  pull(supplier_group)

sup_category <-
  big_number_plot(
    value = val_sup_category,
    text = "Supplier Category",
    value_color = p_green1
  )

ggsave(filename = "asset/sup_category.png", plot = sup_category, width = 6.8, height = 2)
```


```{r echo=FALSE}
distance_plot <-
  big_number_plot(
    value = paste(params$distance, "km"),
    text = "Distance from Novara",
    value_color = p_green1
  )

ggsave(filename = "asset/distance_plot.png", plot = distance_plot, width = 4, height = 2)
```



```{r echo=FALSE}
#| label: parallel-plot
#| warning: false
#| message: false
# Each supplier’s performance across multiple criteria (e.g., Cost, Quality, Delivery Time, Technology, Service) is represented as a line connecting parallel axes, providing a holistic view of their strengths and weaknesses. As the plot chart below shows, the position of composite score of **`r params$company`** is placed at **`r params$ranking`** out ot `r params$total_sup` suppliers.

df2 <- df %>%
  mutate(highlight = ifelse(Company == company, TRUE, FALSE))

parallel_plot <- df2 %>%
  select(Company, Cost, Quality, Delivery, Service, Technology) %>%
  ggparcoord(
    columns = 2:6, # Specify columns to plot
    groupColumn = "Company",
    # order = "anyClass",
    scale = "center",
    # Normalize data (optional,globalminmax → No scaling,
    # uniminmax → Standardize to Min = 0 and Max = 1
    # std → Normalize univariately (substract mean & divide by sd)
    # center → Standardize and center variables)
    alphaLines = 1,
    showPoints = TRUE # Add points to the lines (optional)
  ) +
  scale_color_manual(
    values = setNames(c("gray80", "red"), c("Other", company)),
    guide = "none" # Hide legend for color
  ) +
  guides(
    color = guide_legend(position = "top", direction = "horizontal")
  ) +
  labs(
    # title = paste(company, "performance scores by category"),
    x = "",
    y = "Standardized-Centralized"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(
      hjust = 0.5,
      face = "bold",
      size = 16,
      margin = margin(b = 10) # Add spacing below the title
    ),
    axis.title = element_text(face = "bold", size = 14),
    axis.text = element_text(size = 12, color = "gray20"),
    axis.text.x = element_text(angle = 15L),
    legend.title = element_text(face = "bold", size = 12),
    legend.text = element_text(size = 10),
    panel.grid.major = element_line(color = "gray80", size = 0.5),
    panel.grid.minor = element_blank(), # Remove minor grid lines
    legend.key = element_rect(fill = "transparent", color = NA),
    legend.position = "Default"
  )

ggsave(filename = "asset/parallel_plot.png", plot = parallel_plot)
```



```{r echo=FALSE}
#| label: categorical-plot
#| warning: false
#| message: false

# The chart shows the relationship between cost and quality with technical level. `r params$company` scored **`r params$data$Cost`** on cost efficiency and **`r params$data$Quality`** for quality. It is categorized as **`r params$data$supplier_group`**.
plot_cat <- df %>%
  ggplot(aes(
    x = Cost,
    y = Quality,
    color = ifelse(Company == company, "red", "lightgrey"),
    shape = supplier_group,
    size = Technology_Level
  )) +
  geom_point(alpha = 0.8, stroke = 1.2) + # Increase point alpha for better visibility
  guides(
    shape = guide_legend(
      nrow = 1, # Set the number of rows to 1
      position = "top",
      direction = "horizontal"
    ),
    size = guide_legend(
      nrow = 1, # Set the number of rows to 2
      position = "bottom",
      direction = "horizontal"
    )
  ) +
  scale_color_identity() + # Use this to apply the specified colors directly
  scale_shape_manual(values = c(
    "Strategic" = 16, # Filled circle
    "Improvement" = 17, # Filled triangle
    "High-Risk" = 15, # Filled square
    "Cost-Effective" = 18 # Filled diamond
  )) +
  scale_size_manual(values = c(
    "Low" = 3, # Smallest size
    "Medium" = 6, # Medium size
    "High" = 9 # Largest size
  )) +
  scale_x_continuous(
    breaks = seq(1, 10, by = 2), limits = c(1, 10), expand = c(0.01, 0.01) # Add padding for better aesthetics
  ) + # Set x-axis breaks every 2
  scale_y_continuous(
    breaks = seq(1, 10, by = 2), limits = c(1, 10), expand = c(0.01, 0.01) # Add padding for better aesthetics
  ) + # Set y-axis breaks every 2
  coord_cartesian(xlim = c(0, 11), ylim = c(0, 11)) + # Ensure visible limits beyond breaks
  theme_minimal(base_size = 14) + # Increase base font size
  labs(
    # title = "Cost vs Quality by Tech Score",
    x = "Cost Score",
    y = "Quality Score",
    shape = "Supplier Group",
    size = "Technology Score"
  ) +
  theme(
    plot.title = element_text(
      hjust = 0.5,
      face = "bold",
      size = 16,
      margin = margin(b = 0) # Add spacing below the title
    ),
    axis.title = element_text(face = "bold", size = 14),
    axis.text = element_text(size = 12, color = "gray20"),
    legend.title = element_text(face = "bold", size = 12),
    legend.text = element_text(size = 10),
    panel.grid.major = element_line(color = "gray80", size = 0.5),
    panel.grid.minor = element_blank(), # Remove minor grid lines
    legend.key = element_rect(fill = "transparent", color = NA)
  )


ggsave(filename = "asset/plot_cat.png", plot = plot_cat)
```

```{r echo=FALSE, message=FALSE, error=FALSE}
## Analysis

# To visually analyze supplier performance, a radar chart is utilized to assess the selected supplier across five key dimensions: cost, quality, delivery, service, and technology. A parallel coordinate chart is then employed to compare this supplier to others based on the same criteria. Subsequently, suppliers are categorized using a weighted composite score, and a technical level is assigned based on weighted technical scores. Finally, a plot chart positions the selected supplier on a cost-quality axis, with plot size indicating technological level and color representing supplier category.
```
