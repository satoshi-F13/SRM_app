library(shiny)
library(bslib)
library(dplyr)
library(ggplot2)
library(DT)
library(lubridate)

# Generate sample sales data
set.seed(123)
dates <- seq(as.Date('2023-01-01'), as.Date('2023-12-31'), by = 'day')
sales_data <- data.frame(
  Date = dates,
  Product = sample(c('Laptop', 'Phone', 'Tablet', 'Monitor', 'Keyboard'), length(dates), replace = TRUE),
  Amount = round(runif(length(dates), 100, 1000), 2),
  Units = sample(1:10, length(dates), replace = TRUE)
)

ui <- page_sidebar(
  title = "Sales Analysis Dashboard",
  theme = bs_theme(bootswatch = "pulse"),
  
  # Sidebar with input controls
  sidebar = sidebar(
    dateRangeInput("date_range", "Select Date Range:",
                   start = min(sales_data$Date),
                   end = max(sales_data$Date)),
    selectInput("product", "Select Product:",
                choices = c("All", unique(sales_data$Product)),
                selected = "All"),
    hr(),

  ),
  
  # Main panel with visualizations
  layout_columns(
      value_box(
        title = "Total Revenue",
        value = textOutput("total_revenue"),
        showcase_layout = "top right",
        showcase = icon("dollar-sign")
      ),
      value_box(
        title = "Total Units",
        value = textOutput("total_units"),
        showcase_layout = "top right",
        
        showcase = icon("box")
      ),
      value_box(
        title = "Peak Month",
        value = textOutput("peak_month_kpi"),
        showcase_layout = "top right",
        showcase = icon("think-peaks")
      )
    ),
    tabsetPanel(
      tabPanel(
        "Daily Sales Trend",
        card(
          card_header("Daily Sales Trend"),
          plotOutput("sales_trend", height = "300px") # Adjust the height for better fit
        )
      ),
      tabPanel(
        "Product Performance",
        card(
          card_header("Product Performance"),
          plotOutput("product_performance", height = "300px") # Adjust the height for better fit
        )
      ),
      tabPanel(
        "Detailed Sales Data",
        card(
          card_header("Detailed Sales Data"),
          div(
            style = "height: 300px; overflow-y: auto;", # Set height and enable vertical scrolling
            DTOutput("sales_table")
          )
        )
      )
    )
)

server <- function(input, output) {
  
  # Filtered data based on inputs
  filtered_data <- reactive({
    data <- sales_data %>%
      filter(Date >= input$date_range[1],
             Date <= input$date_range[2])
    
    if (input$product != "All") {
      data <- data %>% filter(Product == input$product)
    }
    data
  })
  
  # Total revenue output
  output$total_revenue <- renderText({
    paste0("â‚¬", format(sum(filtered_data()$Amount), big.mark = ","))
  })
  
  # Total units output
  output$total_units <- renderText({
    format(sum(filtered_data()$Units), big.mark = ",")
  })
  
  # Calculate peak month
  peak_month <- reactive({
    filtered_data() %>%
      mutate(Month = floor_date(Date, "month")) %>%
      group_by(Month) %>%
      summarise(TotalSales = sum(Amount)) %>%
      arrange(desc(TotalSales)) %>%
      slice(1) %>%
      pull(Month)
  })
  
  # Display peak month KPI
  output$peak_month_kpi <- renderText({
    if (nrow(filtered_data()) == 0) {
      return("No data available")
    }
    paste(format(peak_month(), "%b %Y"))
  })
  
  
  # Average Sales per Day
  output$daily_avg_sales <- renderText({
    if (nrow(filtered_data()) == 0) {
      return("No data available")
    }
    paste(format(mean(filtered_data()$Amount)),  big.mark = ",")
  })
  

  
  # Sales trend plot
  output$sales_trend <- renderPlot({
    ggplot(filtered_data(), aes(x = Date, y = Amount)) +
      geom_line(color = "steelblue") +
      geom_smooth(method = "loess", se = FALSE, color = "red") +
      theme_minimal() +
      labs(y = "Sales Amount ($)", x = "Date") +
      theme(legend.position = "none")
  })
  
  # Product performance plot
  output$product_performance <- renderPlot({
    filtered_data() %>%
      group_by(Product) %>%
      summarise(Total_Sales = sum(Amount)) %>%
      ggplot(aes(x = reorder(Product, -Total_Sales), y = Total_Sales)) +
      geom_bar(stat = "identity", fill = "steelblue") +
      theme_minimal() +
      labs(x = "Product", y = "Total Sales ($)") +
      theme(axis.text.x = element_text(angle = 45, hjust = 1))
  })
  
  # Detailed sales table
  output$sales_table <- renderDT({
    filtered_data() %>%
      arrange(desc(Date)) %>%
      mutate(Amount = scales::dollar(Amount)) %>%
      DT::datatable(options = list(pageLength = 5))
  })
}

shinyApp(ui = ui, server = server)
