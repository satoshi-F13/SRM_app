# Data Handlers

# Calculate composite scores
calculate_composite_scores <- function(input, report_data) {
  reactive({
    req(report_data())
    if (nrow(report_data()) == 0) return(NULL)
    
    report_data() %>%
      mutate(
        # Calculate weighted score
        composite_score = 
          input$cost_weight * Cost + 
          input$quality_weight * Quality + 
          input$delivery_weight * Delivery + 
          input$service_weight * Service + 
          input$tech_weight * Technology,
        
        # Technology categorization
        Technology_Level = cut(
          Technology, 
          breaks = c(0, 5, 8, 10),
          labels = c("Low", "Medium", "High"),
          include.lowest = TRUE
        ),
        
        # Supplier categorization
        supplier_group = case_when(
          Quality >= 8 & Technology >= 8 & Service >= 8 & composite_score >= 7.5 ~ "Strategic",
          composite_score < 5 ~ "High-Risk",
          Cost >= 5 & Quality >= 7 & Delivery >= 7 ~ "Budget",
          TRUE ~ "Growth"
        )
      ) %>%
      arrange(desc(composite_score))
  })
}

# Get selected supplier data
get_selected_data <- function(input, composite_scores) {
  reactive({
    req(input$Company, composite_scores())
    if (is.null(composite_scores()) || !input$Company %in% composite_scores()$Company) return(NULL)
    
    composite_scores() %>% 
      filter(Company == input$Company)  
  })
}

# Set up data input handlers
setup_data_input_handlers <- function(input, output, session, val_sup, report_data) {
  # MainBody_sup UI
  output$MainBody_sup <- renderUI({
    fluidPage(
      hr(),
      card(
        card_header("Supplier Data Management"),
        card_body(
          column(6,
                 offset = 0,
                 div(
                   class = "d-flex justify-content-between mb-3",
                   actionButton(inputId = "Add_row_head", label = "Add", icon = icon("plus"), class = "btn-primary"),
                   actionButton(inputId = "mod_row_head", label = "Edit", icon = icon("edit"), class = "btn-info"),
                   actionButton(inputId = "Del_row_head", label = "Delete", icon = icon("trash"), class = "btn-danger")
                 )
          ),
          column(12, dataTableOutput("Main_table_sup")),
          tags$script("$(document).on('click', '#Main_table_sup button', function () {
                     Shiny.onInputChange('lastClickId', this.id);
                     Shiny.onInputChange('lastClick', Math.random()) });")
        )
      )
    )
  })
  
  # Main DataTable
  output$Main_table_sup <- renderDataTable({
    DT <- val_sup$Data
    datatable(DT,
              selection = "single", escape = F,
              options = list(
                scrollX = TRUE,
                scrollCollapse = TRUE,
                pageLength = 10,
                autoWidth = TRUE
              ),
              style = "bootstrap",
              class = "table-responsive"
    )
  })
  
  # CSV Upload Handling
  observeEvent(input$upload_csv, {
    req(input$upload_csv)
    tryCatch(
      {
        uploaded_data <- read_csv(input$upload_csv$datapath)
        required_cols <- c(
          "Date", "Company", "Cost", "Quality", "Delivery",
          "Service", "Technology", "City", "lon", "lat"
        )
        
        if (all(required_cols %in% names(uploaded_data))) {
          val_sup$Data <- uploaded_data
          shinyalert("Success!", "Data uploaded successfully", type = "success")
        } else {
          shinyalert("Error!", "CSV file must contain all required columns", type = "error")
        }
      },
      error = function(e) {
        shinyalert("Error!", "Failed to upload file", type = "error")
      }
    )
  })
  
  # Add Row Modal
  observeEvent(input$Add_row_head, {
    showModal(modalDialog(
      title = "Add a new row",
      dateInput(paste0("Date_add", input$Add_row_head), "Date:", value = Sys.Date()),
      textInput(paste0("Company_add", input$Add_row_head), "Company"),
      sliderInput(paste0("Cost_add", input$Add_row_head), "Cost", min = 1, max = 10, value = 5),
      sliderInput(paste0("Quality_add", input$Add_row_head), "Quality", min = 1, max = 10, value = 5),
      sliderInput(paste0("Delivery_add", input$Add_row_head), "Delivery", min = 1, max = 10, value = 5),
      sliderInput(paste0("Service_add", input$Add_row_head), "Service", min = 1, max = 10, value = 5),
      sliderInput(paste0("Technology_add", input$Add_row_head), "Technology", min = 1, max = 10, value = 5),
      selectInput(paste0("City_add", input$Add_row_head), "City", choices = it_city$city),
      actionButton("go", "Add item"),
      easyClose = TRUE,
      footer = NULL
    ))
  })
  
  # Add new row to Data
  observeEvent(input$go, {
    city_details <- it_city %>% filter(city == input[[paste0("City_add", input$Add_row_head)]])
    new_row <- data.frame(
      Date = as.character(input[[paste0("Date_add", input$Add_row_head)]]),
      Company = input[[paste0("Company_add", input$Add_row_head)]],
      Cost = input[[paste0("Cost_add", input$Add_row_head)]],
      Quality = input[[paste0("Quality_add", input$Add_row_head)]],
      Delivery = input[[paste0("Delivery_add", input$Add_row_head)]],
      Service = input[[paste0("Service_add", input$Add_row_head)]],
      Technology = input[[paste0("Technology_add", input$Add_row_head)]],
      City = input[[paste0("City_add", input$Add_row_head)]],
      lon = city_details$lng,
      lat = city_details$lat,
      stringsAsFactors = FALSE
    )
    val_sup$Data <- rbind(val_sup$Data, new_row)
    
    # Update Company dropdown
    updateSelectInput(
      session,
      "Company",
      choices = unique(val_sup$Data$Company),
      selected = input[[paste0("Company_add", input$Add_row_head)]]
    )
    
    removeModal()
  })
  
  # Save to RDS 
  observeEvent(input$Updated_sup, {
    saveRDS(val_sup$Data, "note.rds")
    report_data(val_sup$Data)  # Update report data
    shinyalert(title = "Saved!", type = "success")
  })
  
  # Delete rows
  observeEvent(input$Del_row_head, {
    showModal(
      if (length(input$Main_table_sup_rows_selected) >= 1) {
        modalDialog(
          title = "Warning",
          paste("Are you sure delete", length(input$Main_table_sup_rows_selected), "rows?"),
          footer = tagList(
            modalButton("Cancel"),
            actionButton("ok", "Yes")
          ), easyClose = TRUE
        )
      } else {
        modalDialog(
          title = "Warning",
          paste("Please select row(s) that you want to delete!"), easyClose = TRUE
        )
      }
    )
  })
  
  # Confirm deletion
  observeEvent(input$ok, {
    val_sup$Data <- val_sup$Data[-input$Main_table_sup_rows_selected, ]
    removeModal()
  })
  
  # Edit button
  observeEvent(input$mod_row_head, {
    showModal(
      if (length(input$Main_table_sup_rows_selected) >= 1) {
        modalDialog(
          fluidPage(
            h3(strong("Modification"), align = "center"),
            hr(),
            dataTableOutput("row_modif"),
            actionButton("save_changes", "Save changes"),
            tags$script(HTML("$(document).on('click', '#save_changes', function () {
                             var list_value = [];
                             for (i = 0; i < $( '.new_input' ).length; i++) {
                               list_value.push($( '.new_input' )[i].value);
                             }
                             Shiny.onInputChange('newValue', list_value);
                             });"))
          ),
          size = "l"
        )
      } else {
        modalDialog(
          title = "Warning",
          paste("Please select the row that you want to edit!"), easyClose = TRUE
        )
      }
    )
  })
  
  # Modify UI
  output$row_modif <- renderDataTable({
    selected_row <- input$Main_table_sup_rows_selected
    old_row <- val_sup$Data[selected_row, ]
    row_change <- list()
    for (i in colnames(old_row)) {
      if (is.numeric(val_sup$Data[[i]])) {
        row_change[[i]] <- paste0('<input class="new_input" value="', old_row[[i]], '" type="number" id=new_', i, " ><br>")
      } else if (is.Date(val_sup$Data[[i]])) {
        row_change[[i]] <- paste0('<input class="new_input" value="', old_row[[i]], '" type="date" id=new_', i, "  ><br>")
      } else {
        row_change[[i]] <- paste0('<input class="new_input" value="', old_row[[i]], '" type="textarea" id=new_', i, "><br>")
      }
    }
    row_change <- as.data.table(row_change)
    setnames(row_change, colnames(old_row))
    
    datatable(
      row_change, 
      escape = F,
      options = list(dom = "t", ordering = F, scrollX = TRUE),
      selection = "none"
    )
  })
  
  # Update with modified values
  observeEvent(input$newValue, {
    newValue <- lapply(input$newValue, function(col) {
      if (suppressWarnings(all(!is.na(as.numeric(as.character(col)))))) {
        as.numeric(as.character(col))
      } else {
        col
      }
    })
    DF <- data.frame(lapply(newValue, function(x) t(data.frame(x))))
    colnames(DF) <- colnames(val_sup$Data)
    val_sup$Data[input$Main_table_sup_rows_selected, ] <- DF
    removeModal()
  })
  
  # Download data
  output$Supplier_csv <- downloadHandler(
    filename = function() {
      paste("Supplier data", Sys.Date(), ".csv", sep = "")
    },
    content = function(file) {
      write.csv(data.frame(val_sup$Data), file, row.names = F)
    }
  )
}

# Set up value box outputs
setup_value_boxes <- function(input, output, report_data, composite_scores, selected_data) {
  # Total number of suppliers
  output$total_suppliers <- renderText({
    if (is.null(report_data()) || nrow(report_data()) == 0) return("N/A")
    nrow(report_data())
  })
  
  # Selected company
  output$selected_company <- renderText({
    req(input$Company, composite_scores())
    if (nrow(report_data()) > 0 && input$Company %in% composite_scores()$Company) {
      input$Company
    } else {
      "N/A"
    }
  })
  
  # Top performer
  output$top_performer <- renderText({
    if (is.null(composite_scores()) || nrow(composite_scores()) == 0) return("N/A")
    composite_scores() %>% pull(Company) %>% first()
  })
  
  # Selected supplier score
  output$selected_score <- renderText({
    req(input$Company, composite_scores())
    if (nrow(report_data()) > 0 && input$Company %in% composite_scores()$Company) {
      composite_scores() %>%
        filter(Company == input$Company) %>%
        pull(composite_score) %>%
        round(1)
    } else {
      "N/A"
    }
  })
  
  # Supplier rank
  output$supplier_rank <- renderText({
    req(input$Company, composite_scores())
    if (nrow(report_data()) > 0 && input$Company %in% composite_scores()$Company) {
      rank <- which(composite_scores()$Company == input$Company)
      paste(rank, "of", nrow(report_data()))
    } else {
      "N/A"
    }
  })
  
  # Distance from Novara
  output$distance <- renderText({
    req(selected_data())
    if (is.null(selected_data())) return("N/A")
    
    # Coordinates of Novara
    novara_lon <- 8.6200
    novara_lat <- 45.4500
    
    distance <- calculate_distance(
      novara_lon, novara_lat,
      selected_data()$lon, selected_data()$lat
    )
    
    paste(distance, "km")
  })
}

# Set up report table
setup_report_table <- function(output, composite_scores) {
  output$Report_table_sup <- renderDataTable({
    req(composite_scores())
    if (is.null(composite_scores()) || nrow(composite_scores()) == 0) return(NULL)
    
    table1 <- composite_scores() %>% select(-c(lon, lat))
    datatable(table1, options = list(pageLength = 10))
  })
}