# Helper Functions

# Function to create value boxes
create_value_box <- function(title, value_id, icon, theme = "secondary", height = "120px") {
  value_box(
    title = title,
    value = textOutput(value_id),
    showcase = bsicons::bs_icon(icon, size = ".7em"),
    theme = theme,
    full_screen = FALSE,
    height = height,
    showcase_layout = "top right"
  )
}

# Function to calculate haversine distance
calculate_distance <- function(lon1, lat1, lon2, lat2) {
  # Radius of Earth in km
  R <- 6371
  
  # Convert degrees to radians
  to_radians <- function(deg) deg * pi / 180
  
  lon1 <- to_radians(lon1)
  lat1 <- to_radians(lat1)
  lon2 <- to_radians(lon2)
  lat2 <- to_radians(lat2)
  
  # Haversine formula
  delta_lon <- lon2 - lon1
  delta_lat <- lat2 - lat1
  
  a <- sin(delta_lat / 2)^2 + cos(lat1) * cos(lat2) * sin(delta_lon / 2)^2
  c <- 2 * atan2(sqrt(a), sqrt(1 - a))
  
  distance <- round(R * c, 1)
  return(distance)
}

# Initialize data from RDS file
initialize_data <- function(val_sup) {
  if (is.null(val_sup$Data)) {
    if (file.exists("note.rds")) {
      val_sup$Data <- readRDS("note.rds")
    } else {
      val_sup$Data <- data.frame(
        Date = character(),
        Company = character(),
        Cost = numeric(),
        Quality = numeric(),
        Delivery = numeric(),
        Service = numeric(),
        Technology = numeric(),
        City = character(),
        lon = numeric(),
        lat = numeric(),
        stringsAsFactors = FALSE
      )
    }
  }
}

# Observe data changes and update dropdown
observe_data_changes <- function(input, output, session, val_sup, report_data) {
  observe({
    if (!is.null(val_sup$Data) && nrow(val_sup$Data) > 0) {
      report_data(val_sup$Data)
      
      # Update Company dropdown dynamically
      updateSelectInput(
        session,
        "Company",
        choices = unique(val_sup$Data$Company),
        selected = unique(val_sup$Data$Company)[1]
      )
    }
  })
}

# Validate that weights sum to 1
validate_weights <- function(input) {
  observe({
    total_weight <- input$quality_weight + input$delivery_weight +
      input$cost_weight + input$service_weight + input$tech_weight
    
    if (abs(total_weight - 1) > 0.01) {
      showNotification(
        "Warning: Weights should sum to 1",
        type = "warning"
      )
    }
  })
}