# Visualization Functions

# Set up charts
setup_charts <- function(input, output, report_data, selected_data) {
  # Radar Chart
  output$radarChart <- renderPlotly({
    create_radar_chart(input, report_data)
  })
  
  # Scatter Map
  output$scattermap <- renderPlotly({
    create_map(input, report_data)
  })
}

# Create radar chart
create_radar_chart <- function(input, report_data) {
  req(input$Company, report_data())
  if (nrow(report_data()) > 0 && input$Company %in% report_data()$Company) {
    # Filter data for the selected company
    selected_data <- report_data() %>% filter(Company == input$Company)
    
    plot_ly(
      type = "scatterpolar",
      fill = "toself"
    ) %>%
      add_trace(
        r = c(
          selected_data$Cost, selected_data$Quality, selected_data$Delivery,
          selected_data$Service, selected_data$Technology, selected_data$Cost
        ),
        theta = c("Cost", "Quality", "Delivery", "Service", "Technology", "Cost"),
        name = selected_data$Company,
        fillcolor = scales::alpha("#61A60E", 0.7),
        line = list(color = "#61A60E")
      ) %>%
      layout(
        polar = list(
          radialaxis = list(visible = TRUE, range = c(0, 10))
        ),
        showlegend = FALSE,
        margin = list(l = 50, r = 50, t = 50, b = 50),
        autosize = TRUE
      )
  } else {
    plotly_empty()
  }
}

# Create map
create_map <- function(input, report_data) {
  req(input$Company, report_data())
  if (nrow(report_data()) > 0 && input$Company %in% report_data()$Company) {
    # Filter data for the selected company
    selected_data <- report_data() %>% filter(Company == input$Company)
    
    plot_ly(
      data = selected_data,
      type = "scattermapbox",
      lon = ~lon,
      lat = ~lat,
      text = ~ paste("Company:", Company, "<br>City:", City),
      mode = "markers",
      marker = list(size = 10)
    ) %>%
      layout(
        mapbox = list(
          style = "open-street-map",
          zoom = 4.5,
          center = list(lon = mean(selected_data$lon), lat = mean(selected_data$lat))
        ),
        margin = list(l = 0, r = 0, t = 0, b = 0)
      )
  } else {
    plotly_empty()
  }
}

# Setup PDF Export
setup_pdf_export <- function(input, output, composite_scores, selected_data, report_data) {
  # Prepare export data
  export_data <- reactive({
    list(
      company = input$Company,
      distance = if (is.null(selected_data())) NA else {
        calculate_distance(
          8.6200, 45.4500,
          selected_data()$lon, selected_data()$lat
        )
      },
      total_sup = nrow(report_data()),
      ranking = if (is.null(selected_data())) "N/A" else {
        rank <- which(composite_scores()$Company == input$Company)
        paste(rank, "of", nrow(report_data()))
      },
      tech_level = if (is.null(selected_data())) "N/A" else {
        selected_data()$Technology_Level
      },
      score = if (is.null(selected_data())) "N/A" else {
        round(selected_data()$composite_score, 1)
      },
      category = if (is.null(selected_data())) "N/A" else {
        selected_data()$supplier_group
      }
    )
  })
  
  # Export PDF handler
  output$export_pdf <- downloadHandler(
    filename = function() {
      paste("SRM-Report", "_", input$Company, "_", Sys.Date(), ".pdf", sep = "")
    },
    content = function(file) {
      # Use withProgress to show a progress bar
      withProgress(message = "Creating Report: ", value = 0, {
        # Stage 1: Increment progress
        incProgress(0.3, detail = "Collecting inputs...")
        
        # Save data to temporary files
        temp_file <- tempfile(fileext = ".rds")
        temp_file2 <- tempfile(fileext = ".rds")
        saveRDS(composite_scores(), temp_file)
        saveRDS(selected_data(), temp_file2)
        
        # Prepare parameters
        params <- c(
          export_data(),
          list(
            df = temp_file,
            data = temp_file2
          )
        )
        
        # Stage 2
        incProgress(0.3, detail = "Building...")
        
        # Create a temporary directory for rendering
        tempDir <- tempdir()
        tempReport <- file.path(tempDir, "report.qmd")
        
        # Copy required files
        file.copy("report.qmd", tempReport, overwrite = TRUE)
        dir.create(file.path(tempDir, "asset"), showWarnings = FALSE)
        file.copy("asset/sample_logo.png", file.path(tempDir, "asset/sample_logo.png"), overwrite = TRUE)
        file.copy("typst-show.typ", file.path(tempDir, "typst-show.typ"), overwrite = TRUE)
        file.copy("typst-template.typ", file.path(tempDir, "typst-template.typ"), overwrite = TRUE)
        
        # Render report
        withr::with_dir(tempDir, {
          quarto::quarto_render(
            input = "report.qmd",
            output_format = "typst",
            execute_params = params
          )
          
          # Stage 3
          incProgress(1, detail = "Downloading report...")
          
          # Copy the generated PDF
          generatedPDF <- sub("\\.qmd$", ".pdf", tempReport)
          file.copy(generatedPDF, file, overwrite = TRUE)
        })
      })
    }
  )
}