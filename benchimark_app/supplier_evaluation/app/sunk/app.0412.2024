library(shiny)
library(shinyjs)
library(bslib)
library(DT)
library(data.table)
library(lubridate)
library(shinyalert)
library(plotly)
library(readr)
library(dplyr)

# Read the city data
it_city <- read_csv(file = "data/it.csv")

# Define val_sup function to provide initial choices for the Company dropdown
val_sup <- function() {
  data.frame(
    Company = character(0) # Empty character vector
  )
}

library(shiny)
library(bslib)
library(bsicons)
library(plotly)
library(DT)

# Define UI for the app
ui <- fluidPage(
  title = "Suppliers' Benchmark Board",  # Tab title
  theme = bs_theme(version = 5, bootswatch = "minty"),
  
  # Add a title to the main body
  tags$head(
    tags$style(HTML("
      .scroll-container {
        overflow-y: auto; /* Enable vertical scrolling */
        max-height: 500px; /* Set a maximum height for the scroll area */
      }
    "))
  ),
  
  # Page layout
  page_sidebar(
    # Sidebar
    sidebar = sidebar(
      title = "Controls",
      selectInput(
        inputId = "Company",
        label = "Select Supplier:",
        choices = val_sup()$Company  # Placeholder, reactive data should populate this
      ),
      fileInput(
        inputId = "upload_csv",
        label = "Upload Supplier Data (CSV)",
        accept = c(".csv"),
        multiple = FALSE,
        width = "100%",
        buttonLabel = "Browse...",
        placeholder = "No file selected"
      ),
      downloadButton("export_pdf", "PDF", class = "btn-success w-100")
    ),
    
    # Main Content
    div(
      class = "container-fluid",
      # Display the page title
      h1("Suppliers' Benchmark Report", class = "text-center my-4"),
      
      # First Row: Value Boxes
      layout_columns(
        fill = FALSE,
        value_box(
          title = "Top Performer",
          value = textOutput("top_performer"),
          showcase = bsicons::bs_icon("trophy-fill", size = ".7em"),
          theme = "success",
          full_screen = FALSE,
          height = "120px", # Reduced height
          showcase_layout = "top right"
        ),
        value_box(
          title = "Total Suppliers",
          value = textOutput("total_suppliers"),
          showcase = bsicons::bs_icon("people-fill", size = ".7em"),
          theme = "primary",
          full_screen = FALSE,
          height = "120px", # Reduced height
          showcase_layout = "top right"
        ),
        value_box(
          title = "Selected Comapny",
          value = textOutput("selected_company"),
          showcase = bsicons::bs_icon("person-vcard", size = ".7em"),
          theme = "secondary",
          full_screen = FALSE,
          height = "120px", # Reduced height
          showcase_layout = "top right"
        ),
        value_box(
          title = "Overall Score",
          value = textOutput("selected_score"),
          showcase = bsicons::bs_icon("speedometer2", size = ".7em"),
          theme = "secondary",
          full_screen = FALSE,
          height = "120px", # Reduced height
          showcase_layout = "top right"
        ),

        value_box(
          title = "Ranking",
          value = textOutput("supplier_rank"),
          showcase = bsicons::bs_icon("bar-chart-line-fill", size = ".7em"),
          theme = "secondary",
          full_screen = FALSE,
          height = "120px", # Reduced height
          showcase_layout = "top right"
        ),
        
        value_box(
          title = "Distance",
          value = textOutput("distance"),
          showcase = bsicons::bs_icon("sign-merge-right", size = ".7em"),
          theme = "secondary",
          full_screen = FALSE,
          height = "120px", # Reduced height
          showcase_layout = "top right"
        )

      ),
      
      # Second row
      layout_columns(
        col_widths = c(6, 6), # Two equal-width columns
        card(
          card_header("Performance Analysis"),
          full_screen = TRUE,
          div(
            style = "height: 300px; width: 100%; display: flex; justify-content: center; align-items: center;",
            plotlyOutput("radarChart", height = "100%", width = "100%")
          ),
          card_body(min_height = 50) # Adjust minimum height for proper scaling
        ),
        
        card(
          card_header("Geographical Distribution"),
          full_screen = TRUE,
          div(
            style = "height: 100%; margin: 0; padding: 0;", # Remove margins and padding
            plotlyOutput("scattermap", height = "100%", width = "100%") # Maximize map size
          ),
          card_body(
            style = "margin: 0; padding: 0;", # Ensure card body does not add spacing
            min_height = 50
          )
        )
        ),
  
      # Third Row: Data Table
      card(
        card_header("Supplier Database"),
        full_screen = TRUE,
        dataTableOutput("Main_table_sup")
      )
    )
  )
)


server <- function(input, output, session) {
  # Reactive value to store data
  val_sup <- reactiveVal(data.frame(
    Date = character(),
    Company = character(),
    Cost = numeric(),
    Quality = numeric(),
    Delivery = numeric(),
    Service = numeric(),
    Technology = numeric(),
    City = character(),
    lon = numeric(),
    lat = numeric(),
    stringsAsFactors = FALSE
  ))
  
  # Calculate total scores
  total_scores <- reactive({
    val_sup() %>%
        mutate(total_score = Cost + Quality + Delivery + Service + Technology) %>%
        arrange(desc(total_score))
  })
  

  # CSV Upload Handling
  observeEvent(input$upload_csv, {
    req(input$upload_csv)
    tryCatch(
      {
        uploaded_data <- read_csv(input$upload_csv$datapath)
        required_cols <- c(
          "Date", "Company", "Cost", "Quality", "Delivery",
          "Service", "Technology", "City", "lon", "lat"
        )

        if (all(required_cols %in% names(uploaded_data))) {
          val_sup(uploaded_data)
          shinyalert("Success!", "Data uploaded successfully", type = "success")
          
          # Update Company dropdown dynamically
          updateSelectInput(
            session,
            "Company",
            choices = unique(uploaded_data$Company),
            selected = unique(uploaded_data$Company)[1] # Preselect the first company
          )
          
        } else {
          shinyalert("Error!", "CSV file must contain all required columns", type = "error")
        }
      },
      error = function(e) {
        shinyalert("Error!", "Failed to upload file", type = "error")
      }
    )
  })

  # Value box outputs
  ## Total Numbers of Suppliers
  output$total_suppliers <- renderText({
    nrow(val_sup())
  })

  ## Pull the name of selected company
  output$selected_company <- renderText({
    req(input$Company) # Ensure a company is selected
    if (nrow(val_sup()) > 0 && input$Company %in% total_scores()$Company) {
      total_scores() %>%
        filter(Company == input$Company) %>%
        pull(Company) 
    } else {
      "N/A"
    }
  })

  ## Pull the name of top performer
  output$top_performer <- renderText({
    if (nrow(val_sup()) > 0) {
      total_scores() %>%
        pull(Company) %>%
        first()
    } else {
      "N/A"
    }
  })
  
  # Selected supplier score
  output$selected_score <- renderText({
    req(input$Company) # Ensure a company is selected
    if (nrow(val_sup()) > 0 && input$Company %in% total_scores()$Company) {
      total_scores() %>%
        filter(Company == input$Company) %>%
        pull(total_score) %>%
        round(1)
    } else {
      "N/A"
    }
  })
  
  # Supplier rank
  output$supplier_rank <- renderText({
    req(input$Company) # Ensure a company is selected
    if (nrow(val_sup()) > 0 && input$Company %in% total_scores()$Company) {
      rank <- which(total_scores()$Company == input$Company)
      paste(rank, "of", nrow(val_sup()))
    } else {
      "N/A"
    }
  })


  output$radarChart <- renderPlotly({
    req(input$Company) # Ensure a company is selected
    if (nrow(val_sup()) > 0 && input$Company %in% total_scores()$Company) {
      # Filter data for the selected company
      selected_data <- val_sup() %>% filter(Company == input$Company)
      
      plot <- plot_ly(
        type = "scatterpolar",
        fill = "toself"
        
      ) %>%
        add_trace(
          r = c(
            selected_data$Cost, selected_data$Quality, selected_data$Delivery,
            selected_data$Service, selected_data$Technology, selected_data$Cost
          ),
          theta = c("Cost", "Quality", "Delivery", "Service", "Technology", "Cost"),
          name = selected_data$Company
        ) %>%
        layout(
          polar = list(
            radialaxis = list(visible = TRUE, range = c(0, 10))
          ),
          showlegend = FALSE,
          margin = list(l = 50, r = 50, t = 50, b = 50),        # Adjust margins for centering
          autosize = TRUE                                       # Ensure chart resizes dynamically
          
        )
      
      plot
    } else {
      plotly_empty() # Display empty plot if no valid company selected
    }
  })
  
  output$scattermap <- renderPlotly({
    req(input$Company) # Ensure a company is selected
    if (nrow(val_sup()) > 0 && input$Company %in% val_sup()$Company) {
      # Filter data for the selected company
      selected_data <- val_sup() %>% filter(Company == input$Company)
      
      plot <- plot_ly(
        data = selected_data,
        type = "scattermapbox",
        lon = ~lon,
        lat = ~lat,
        text = ~ paste("Company:", Company, "<br>City:", City),
        mode = "markers",
        marker = list(size = 10)
      ) %>%
        layout(
          mapbox = list(
            style = "open-street-map", #options ("white-bg", 'open-street-map', "carto-positron", "carto-darkmatter")
            zoom = 4.5, # Adjust zoom for better visibility
            center = list(lon = mean(selected_data$lon), lat = mean(selected_data$lat))
          ),
          margin = list(l = 0, r = 0, t = 0, b = 0) # Remove all margins
              )
      
      plot
    } else {
      plotly_empty() # Display empty plot if no valid company selected
    }
  })
  

  # Data table
  output$Main_table_sup <- renderDataTable({
    req(total_scores())
    table1 <- total_scores() %>% select(-c(lon, lat))
    datatable(table1, options = list(pageLength = 10))
  })
  
  # Selected data with total score
  selected_data <- reactive({
    req(input$Company)
    val_sup() %>% 
      filter(Company == input$Company) %>% 
      mutate(total_score = Cost + Quality + Delivery + Service + Technology)
  })
  
  ## Distance from Novara
  # Radius of Earth in km
  R <- 6371 
  # Coordinates of Novara
  novara_lon <- 8.6200
  novara_lat <- 45.4500
  
  distance <- reactive({
    # Convert degrees to radians
    to_radians <- function(deg) deg * pi / 180
    
    lon1 <- to_radians(novara_lon)
    lat1 <- to_radians(novara_lat)
    lon2 <- to_radians(selected_data()$lon)
    lat2 <- to_radians(selected_data()$lat)
    
    # Haversine formula
    delta_lon <- lon2 - lon1
    delta_lat <- lat2 - lat1
    
    a <- sin(delta_lat / 2)^2 + cos(lat1) * cos(lat2) * sin(delta_lon / 2)^2
    c <- 2 * atan2(sqrt(a), sqrt(1 - a))
    
    distance <- round(R * c,1)
    return(distance)
  })
  
  output$distance <- renderText({
    paste( distance(), "km")
  })
  
  # Assign the file name
  filename <- reactive({
    paste("SRM-Report","_",input$Company, "_", Sys.Date(), ".pdf", sep = "")
  })

  # Export PDF
  output$export_pdf <- downloadHandler(
    filename = function() filename(),
    content = function(file) {
      # Use withProgress to show a progress bar
      withProgress(message = "Creating Report: ", value = 0, {
        # Stage 1: Increment progress
        incProgress(0.3, detail = "Collecting inputs...")
        
        # Write the dataframe to a temporary file
        temp_file <- tempfile(fileext = ".rds")
        saveRDS(total_scores(), temp_file)
        
      # Ensure a company is selected
      req(input$Company)
      # Prepare parameters
      params <- 
        list(
        company = input$Company,
        data = selected_data(),
        distance = distance(),
        df = temp_file
                    )
      
        # Stage 2
      incProgress(0.3, detail = "Building...")
      
      # Create a temporary directory for rendering
      tempDir <- tempdir()
      tempReport <- file.path(tempDir, "report.qmd")
      
      # Copy the report template to the temp directory
      file.copy("report.qmd", tempReport, overwrite = TRUE)
      
      # Copy required assets to temp directory
      dir.create(file.path(tempDir, "asset"), showWarnings = FALSE)
      file.copy("asset/sample_logo.png", file.path(tempDir, "asset/sample_logo.png"), overwrite = TRUE)
      file.copy("typst-show.typ", file.path(tempDir, "typst-show.typ"), overwrite = TRUE)
      file.copy("typst-template.typ", file.path(tempDir, "typst-template.typ"), overwrite = TRUE)
      
      # Set working directory to temp directory
      withr::with_dir(tempDir, {
        # Render the report with parameters
        quarto::quarto_render(
          input = "report.qmd",
          output_format = "typst",
          execute_params = params
        )
        # Stage 3
        incProgress(1, detail = "Downloading report...")
        
        # Copy the generated PDF to the output file location
        generatedPDF <- sub("\\.qmd$", ".pdf", tempReport)
        file.copy(generatedPDF, file, overwrite = TRUE)
      })
      })
    }
  )
  
}

shinyApp(ui = ui, server = server)
